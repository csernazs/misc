

def find_largest_cycle(text):
    retval = ""
    for start in xrange(0, len(text)-1):
        subtext = text[start:]
        for n in xrange(1, len(subtext)/2+1):
            left = subtext[0:n]
            right = subtext[n:n*2]
    #        print "%r %r" % (left, right)
            if left == right and len(left) > len(retval):
                retval = left

    return retval


if __name__ == "__main__":
    for test in ["hellohelloworldworld", "helloworldhelloworld", '001003009027081243731193580742226680040120361083249749247743229689067201604814443329989969909729187562688064192577733199598796389167502507522567703109327983951855566700100300902708124373119358074222668004012036108324974924774322968906720160481444332998996990972918756268806419257773319959879638916750250752256770310932798395185556670010030090270812437311935807422266800401203610832497492477432296890672016048144433299899699097291875626880641925777331995987963891675025075225677031093279839518555667001003009027081243731193580742226680040120361083249749247743229689067201604814443329989969909729187562688064192577733199598796389167502507522567703109327983951855566700100300902708124373119358074222668004012036108324974924774322968906720160481444332998996990972918756268806419257773319959879638916750250752256770310932798395185556670010030090270812437311935807422266800401203610832497492477432296890672016048144433299899699097291875626880641925777331995987963891675025075225677031093279839518555667001003']:
        print "-"*10
        print find_largest_cycle(test)
